generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answer {
  id             Int              @id @default(autoincrement())
  questionId     Int
  title          String           @db.LongText
  answerFileUrl  String?
  description    String?          @db.LongText
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  isCorrect      Boolean          @default(false)
  isDeleted      Boolean          @default(false)
  question       question         @relation(fields: [questionId], references: [id])
  quizuseranswer quizuseranswer[]

  @@index([questionId], map: "answer_questionId_fkey")
}

model category {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
  quizzes   quiz[]
}

model matiere {
  id                       Int                        @id @default(autoincrement())
  title                    String
  createdAt                DateTime                   @default(now())
  isDeleted                Boolean                    @default(false)
  questions                question[]
  quizzes                  quizmatiere[]
  userperformancebymatiere userperformancebymatiere[]
}

model question {
  id                Int              @id @default(autoincrement())
  title             String           @db.LongText
  description       String?          @db.LongText
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?
  matiereId         Int?
  categoryId        Int?
  isDeleted         Boolean          @default(false)
  isMultiChoice     Boolean          @default(false)
  fileUrl           String?
  sourceId          Int?
  response_file_url String?          @db.Text
  point             Int              @default(0)
  answers           answer[]
  category          category?        @relation(fields: [categoryId], references: [id])
  matiere           matiere?         @relation(fields: [matiereId], references: [id])
  source            source?          @relation(fields: [sourceId], references: [id])
  quizQuestions     quizquestion[]
  quizuseranswer    quizuseranswer[]

  @@index([categoryId], map: "question_categoryId_fkey")
  @@index([matiereId], map: "question_matiereId_fkey")
  @@index([sourceId], map: "question_sourceId_fkey")
}

model quiz {
  id                 Int                  @id @default(autoincrement())
  title              String
  createdAt          DateTime             @default(now())
  mode               Int                  @default(1) @db.SmallInt
  categoryId         Int
  description        String?              @db.Text
  level              Int?                 @default(1)
  time               Int?
  is_prenium         Int                  @default(0) @db.SmallInt
  is_active          Boolean?
  category           category             @relation(fields: [categoryId], references: [id])
  quizMatieres       quizmatiere[]
  quizQuestions      quizquestion[]
  quizuseranswer     quizuseranswer[]
  userquizstatistics userquizstatistics[]

  @@index([categoryId], map: "quiz_categoryId_fkey")
}

model quizmatiere {
  id           Int     @id @default(autoincrement())
  quizId       Int
  matiereId    Int
  matiereOrder Int?
  time         Int
  matiere      matiere @relation(fields: [matiereId], references: [id])
  quiz         quiz    @relation(fields: [quizId], references: [id])

  @@unique([quizId, matiereId])
  @@index([matiereId], map: "quizMatiere_matiereId_fkey")
}

model quizquestion {
  id            Int      @id @default(autoincrement())
  quizId        Int
  questionId    Int
  questionOrder Int?
  question      question @relation(fields: [questionId], references: [id])
  quiz          quiz     @relation(fields: [quizId], references: [id])

  @@unique([quizId, questionId], map: "quizQuestion_quizId_questionId_key")
  @@index([questionId], map: "quizQuestion_questionId_fkey")
}

model source {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
}

model user {
  id                       Int                        @id @default(autoincrement())
  name                     String
  email                    String                     @unique(map: "User_email_key")
  firstname                String
  codeStep                 String?
  roles                    String                     @default("user")
  password                 String
  createdAt                DateTime                   @default(now()) @db.DateTime(0)
  quizuseranswer           quizuseranswer[]
  useractivitylog          useractivitylog[]
  userperformancebymatiere userperformancebymatiere[]
  userquizstatistics       userquizstatistics[]
  verification_codes       verificationcode[]
}

model verificationcode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "verificationCode_userId_fkey")
}

model quizuseranswer {
  id         Int      @id @default(autoincrement())
  quizId     Int
  answerId   Int
  questionId Int
  userId     Int
  answer     answer   @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizuseranswer_ibfk_1")
  question   question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizuseranswer_ibfk_2")
  quiz       quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizuseranswer_ibfk_3")
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "quizuseranswer_ibfk_4")

  @@index([answerId], map: "answerId")
  @@index([questionId], map: "questionId")
  @@index([quizId], map: "quizId")
  @@index([userId], map: "userId")
}

model useractivitylog {
  id        Int       @id @default(autoincrement())
  userId    Int
  action    String    @db.Text
  details   String?   @db.Text
  createdAt DateTime? @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "useractivitylog_ibfk_1")

  @@index([createdAt], map: "idx_created")
  @@index([userId], map: "idx_user")
  @@index([userId, createdAt], map: "idx_user_activity")
}

model userperformancebymatiere {
  id         Int       @id @default(autoincrement())
  userId     Int
  matiereId  Int
  totalScore Int?      @default(0)
  quizCount  Int?      @default(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userperformancebymatiere_ibfk_1")
  matiere    matiere   @relation(fields: [matiereId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userperformancebymatiere_ibfk_2")

  @@unique([userId, matiereId], map: "unique_user_matiere")
  @@index([matiereId], map: "idx_matiere")
  @@index([userId], map: "idx_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model userquizstatistics {
  id          Int       @id @default(autoincrement())
  userId      Int
  quizId      Int
  score       Int?      @default(0)
  timeSpent   Int?      @default(0)
  completedAt DateTime? @default(now()) @db.DateTime(0)
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userquizstatistics_ibfk_1")
  quiz        quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userquizstatistics_ibfk_2")

  @@index([quizId], map: "idx_quiz")
  @@index([userId, completedAt], map: "idx_quiz_completion")
  @@index([userId], map: "idx_user")
}
