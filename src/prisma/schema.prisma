datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model user {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  firstname String
  codeStep  String?
  roles     String  @default("user")
  password  String

  verificationCodes verificationCode[]
}

model question {
  id            Int            @id @default(autoincrement())
  title         String         @db.LongText
  description   String?        @db.LongText
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  matiereId     Int?
  categoryId    Int?
  isDeleted     Boolean        @default(false)
  isMultiChoice Boolean        @default(false)
  fileUrl       String?
  sourceId      Int?
  answers       answer[]
  matiere       matiere?       @relation(fields: [matiereId], references: [id])
  source        source?        @relation(fields: [sourceId], references: [id])
  category      category?      @relation(fields: [categoryId], references: [id])
  quizQuestions quizQuestion[]
}

model answer {
  id            Int       @id @default(autoincrement())
  questionId    Int
  title         String    @db.LongText
  answerFileUrl String?
  description   String?   @db.LongText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  isCorrect     Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  question      question  @relation(fields: [questionId], references: [id])
}

model matiere {
  id        Int           @id @default(autoincrement())
  title     String
  createdAt DateTime      @default(now())
  isDeleted Boolean       @default(false)
  questions question[]
  quizzes   quizMatiere[]
}

model source {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
}

model category {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
  quizzes   quiz[]
}

model quiz {
  id            Int            @id @default(autoincrement())
  title         String
  createdAt     DateTime       @default(now())
  mode          Int            @default(1) @db.SmallInt
  categoryId    Int
  category      category       @relation(fields: [categoryId], references: [id])
  quizQuestions quizQuestion[]
  quizMatieres  quizMatiere[]
}

model quizQuestion {
  id            Int      @id @default(autoincrement())
  quizId        Int
  questionId    Int
  questionOrder Int? // Specifies the order of the question in the quiz
  quiz          quiz     @relation(fields: [quizId], references: [id])
  question      question @relation(fields: [questionId], references: [id])

  @@unique([quizId, questionId]) // Ensures no duplicate questions in a quiz
}

model quizMatiere {
  id           Int     @id @default(autoincrement())
  quizId       Int
  matiereId    Int
  matiereOrder Int?
  quiz         quiz    @relation(fields: [quizId], references: [id])
  matiere      matiere @relation(fields: [matiereId], references: [id])

  @@unique([quizId, matiereId]) // Ensures no duplicate matieres in a quiz
}

model verificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])
}
