generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answer {
  id            Int       @id @default(autoincrement())
  questionId    Int
  title         String    @db.LongText
  answerFileUrl String?
  description   String?   @db.LongText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  isCorrect     Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  question      question  @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "answer_questionId_fkey")
}

model category {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
  quizzes   quiz[]
}

model matiere {
  id        Int           @id @default(autoincrement())
  title     String
  createdAt DateTime      @default(now())
  isDeleted Boolean       @default(false)
  questions question[]
  quizzes   quizmatiere[]
}

model question {
  id                Int            @id @default(autoincrement())
  title             String         @db.LongText
  description       String?        @db.LongText
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  matiereId         Int?
  categoryId        Int?
  isDeleted         Boolean        @default(false)
  isMultiChoice     Boolean        @default(false)
  fileUrl           String?
  sourceId          Int?
  response_file_url String?        @db.Text
  answers           answer[]
  category          category?      @relation(fields: [categoryId], references: [id])
  matiere           matiere?       @relation(fields: [matiereId], references: [id])
  source            source?        @relation(fields: [sourceId], references: [id])
  quizQuestions     quizquestion[]

  @@index([categoryId], map: "question_categoryId_fkey")
  @@index([matiereId], map: "question_matiereId_fkey")
  @@index([sourceId], map: "question_sourceId_fkey")
}

model quiz {
  id            Int            @id @default(autoincrement())
  title         String
  createdAt     DateTime       @default(now())
  mode          Int            @default(1) @db.SmallInt
  categoryId    Int
  level         Int?           @default(1)
  description   String?        @db.Text
  time          Int?
  category      category       @relation(fields: [categoryId], references: [id])
  quizMatieres  quizmatiere[]
  quizQuestions quizquestion[]

  @@index([categoryId], map: "quiz_categoryId_fkey")
}

model quizmatiere {
  id           Int     @id @default(autoincrement())
  quizId       Int
  matiereId    Int
  matiereOrder Int?
  matiere      matiere @relation(fields: [matiereId], references: [id])
  quiz         quiz    @relation(fields: [quizId], references: [id])

  @@unique([quizId, matiereId])
  @@index([matiereId], map: "quizMatiere_matiereId_fkey")
}

model quizquestion {
  id            Int      @id @default(autoincrement())
  quizId        Int
  questionId    Int
  questionOrder Int?
  question      question @relation(fields: [questionId], references: [id])
  quiz          quiz     @relation(fields: [quizId], references: [id])

  @@unique([quizId, questionId], map: "quizQuestion_quizId_questionId_key")
  @@index([questionId], map: "quizQuestion_questionId_fkey")
}

model source {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  questions question[]
}

model user {
  id                 Int                @id @default(autoincrement())
  name               String
  email              String             @unique(map: "User_email_key")
  firstname          String
  codeStep           String?
  roles              String             @default("user")
  password           String
  verification_codes verificationcode[]
}

model verificationcode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "verificationCode_userId_fkey")
}
